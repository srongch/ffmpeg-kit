buildscript {
    repositories {
        google()
        mavenCentral()
        flatDir {
            dirs 'libs'
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.1.0'
    }
}

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
        flatDir {
            dirs findPackageLocation()
        }
    }
}

def findPackageLocation() {
    def location = "${rootProject.projectDir.parentFile}/pubspec.lock"
    println "üîç Searching for pubspec.lock file in ${location}"
    def pubspecLock = file(location)
    def pluginLibsDir = null
    def pluginName = "ffmpeg_kit_flutter"
    if (pubspecLock.exists()) {
        def lines = pubspecLock.readLines()
        println "üîç Searching for ${pluginName} AAR directory in pubspec.lock file...${location}"

        def startIndex = lines.findIndexOf { it.trim().startsWith("${pluginName}:") }

        if (startIndex != -1) {
            def blockLines = []
            for (int i = startIndex + 1; i < lines.size(); i++) {
                def line = lines[i]
                def trimmed = line.trim()
                if (trimmed.startsWith("version:")) {
                    blockLines.add(trimmed)
                    break // ‚úÖ Stop right after version line
                }
                blockLines.add(trimmed)
            }
            println "blockLines: ${blockLines}"
            def isGit = blockLines.any { it.startsWith("source: git") }
            if (isGit) {
                def refLine = blockLines.find { it.startsWith("resolved-ref:") }
                def urlLine = blockLines.find { it.startsWith("url:") }
                def pathLine = blockLines.find { it.startsWith("path:") }
                def resolvedRef = refLine?.split(":")?.getAt(1)?.trim()?.replaceAll("\"", "")
                if (resolvedRef) {
                    def folderName = extractRepoName(urlLine?.split("url:")?.getAt(1)?.trim()?.replaceAll("\"", ""))
                    def pathName = pathLine?.split(":")?.getAt(1)?.trim()?.replaceAll("\"", "")
                    def gitFolder = "${System.getProperty("user.home")}/.pub-cache/git/${folderName}-${resolvedRef}"

                    def normalizedPath = "${gitFolder}${pathName}/android/libs"
                    println "gitFolder: ${normalizedPath}"
                    return normalizedPath
                }
            }

            def isPath = blockLines.any { it.startsWith("source: path") }
            if (isPath) {
                println "üîç Searching for path in pubspec.lock file...${location}"
                def pathLine = blockLines.find { it.startsWith("path:") }
                def relativePath = pathLine?.split(":", 2)?.getAt(1)?.trim()?.replaceAll("\"", "")
                println "relativePath: ${relativePath}"
                if (relativePath) {
                    def fullPath = "${rootProject.projectDir.parentFile.parentFile}/${relativePath}"
                    println "fullPath: ${fullPath}"
                    def normalizedPath = removeDotDot(fullPath)
                    println "normalizedPath: ${normalizedPath}"
                    pluginLibsDir = "${normalizedPath}/android/libs"
                }

        }
        }
    }else{
        println "‚ö†Ô∏è pubspec.lock file not found. Please run 'flutter pub get' to generate it."
    }

    if (pluginLibsDir != null) {
        println "‚úÖ Found ${pluginName} AAR directory via resolved-ref: ${pluginLibsDir}"
        return pluginLibsDir
    } else {
        println "‚ö†Ô∏è Could not locate ${pluginName} git package via resolved-ref"
    }

    return 'libs'
}

static def removeDotDot(path) {
    return path.replace("../", "")
}

def extractRepoName(gitUrl) {
    println "üîç Extracting repo name from URL: ${gitUrl}"
    def cleaned = gitUrl.trim()
    def name = cleaned.tokenize('/').last()  // gets 'packages.git'
    return name.endsWith(".git") ? name[0..-5] : name  // remove .git
}

apply plugin: 'com.android.library'

// Add this at the top level to make your libs directory accessible
repositories {
    flatDir {
        dirs project.file('libs')
    }
}

android {
    // Conditional for compatibility with AGP <4.2.
    if (project.android.hasProperty("namespace")) {
        namespace 'com.arthenica.ffmpegkit.flutter'
    }

    compileSdkVersion 33

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 33
        versionCode 603
        versionName "6.0.3"
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }
    lintOptions {
        disable 'GradleCompatible'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'androidx.annotation:annotation:1.5.0'
    // Use project-specific path to reference the AAR file
    implementation(name: 'ffmpeg-kit', ext: 'aar')
    implementation 'com.arthenica:smart-exception-java:0.2.1'
}
